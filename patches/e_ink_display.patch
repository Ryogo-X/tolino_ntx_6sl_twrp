From eb19aeb72c332c06a577fca6285de7ec5f2a1d23 Mon Sep 17 00:00:00 2001
From: Ryogo <ryogo.z@gmail.com>
Date: Fri, 10 Nov 2017 07:19:11 -0800
Subject: [PATCH] add support for Freescale i.MX processors integrated epd controller

Change-Id: Ica4c66d2fb93f86041c98a1aec8f050fe6616f21
---

diff --git a/minuitwrp/Android.mk b/minuitwrp/Android.mk
index 054dd45..486a897 100644
--- a/minuitwrp/Android.mk
+++ b/minuitwrp/Android.mk
@@ -172,6 +172,16 @@
     $(error stopping)
 endif
 
+ifeq ($(TW_TARGET_USES_IMX_EPDC), true)
+  LOCAL_CFLAGS += -DIMX_EPDC
+endif
+
+ifneq ($(TW_SCREEN_ROTATION_IMX),)
+  LOCAL_CFLAGS += -DIMX_SCREEN_ROTATION=$(TW_SCREEN_ROTATION_IMX)
+else
+  LOCAL_CFLAGS += -DIMX_SCREEN_ROTATION=0
+endif
+
 LOCAL_CLANG := true
 
 LOCAL_CFLAGS += -DTWRES=\"$(TWRES_PATH)\"
diff --git a/minuitwrp/graphics_fbdev.cpp b/minuitwrp/graphics_fbdev.cpp
old mode 100644
new mode 100755
index a1c42d0..70117e8
--- a/minuitwrp/graphics_fbdev.cpp
+++ b/minuitwrp/graphics_fbdev.cpp
@@ -34,6 +34,10 @@
 #include "graphics.h"
 #include <pixelflinger/pixelflinger.h>
 
+#ifdef IMX_EPDC
+#include <linux/mxcfb.h>
+#endif
+
 static GRSurface* fbdev_init(minui_backend*);
 static GRSurface* fbdev_flip(minui_backend*);
 static void fbdev_blank(minui_backend*, bool);
@@ -58,6 +62,52 @@
 minui_backend* open_fbdev() {
     return &my_backend;
 }
+
+#ifdef IMX_EPDC
+static unsigned int marker_val = 1;
+static int epdc_fd;
+
+static unsigned int epdc_update(int left, int top, int width, int height, int wave_mode,
+	int wait_for_complete, uint flags)
+{
+	struct mxcfb_update_data upd_data;
+	int retval;
+
+	upd_data.update_mode = UPDATE_MODE_PARTIAL;
+	upd_data.waveform_mode = wave_mode;
+	upd_data.update_region.left = left;
+	upd_data.update_region.width = width;
+	upd_data.update_region.top = top;
+	upd_data.update_region.height = height;
+	upd_data.temp = TEMP_USE_AMBIENT;
+	upd_data.flags = flags;
+
+	if (wait_for_complete) {
+		/* Get unique marker value */
+		upd_data.update_marker = marker_val++;
+	} else {
+		upd_data.update_marker = 0;
+	}
+
+	retval = ioctl(epdc_fd, MXCFB_SEND_UPDATE, &upd_data);
+	while (retval < 0) {
+		/* We have limited memory available for updates, so wait and
+		 * then try again after some updates have completed */
+		sleep(1);
+		retval = ioctl(epdc_fd, MXCFB_SEND_UPDATE, &upd_data);
+	}
+
+	if (wait_for_complete) {
+		/* Wait for update to complete */
+		retval = ioctl(epdc_fd, MXCFB_WAIT_FOR_UPDATE_COMPLETE, &upd_data.update_marker);
+		if (retval < 0) {
+			printf("Wait for update complete failed.  Error = 0x%x", retval);
+		}
+	}
+
+	return upd_data.waveform_mode;
+}
+#endif
 
 static void fbdev_blank(minui_backend* backend __unused, bool blank)
 {
@@ -111,9 +161,20 @@
 #endif
     }
     displayed_buffer = n;
+
+#ifdef IMX_EPDC
+    epdc_update(0, 0, vi.xres, vi.yres, WAVEFORM_MODE_AUTO, 1, 0);
+#endif
 }
 
 static GRSurface* fbdev_init(minui_backend* backend) {
+
+#ifdef IMX_EPDC
+    int auto_update_mode;
+    struct mxcfb_waveform_modes wv_modes;
+    int scheme = UPDATE_SCHEME_QUEUE_AND_MERGE;
+#endif
+
     int retry = 20;
     int fd = -1;
     while (fd == -1) {
@@ -166,6 +227,21 @@
         close(fd);
         return NULL;
     }
+
+#ifdef IMX_EPDC
+    vi.bits_per_pixel = 16;
+    vi.grayscale = 0;
+    vi.yoffset = 0;
+    vi.rotate = IMX_SCREEN_ROTATION; //FB_ROTATE_UR = 0 is default
+    vi.activate = FB_ACTIVATE_FORCE;
+    epdc_fd = fd;
+
+    if (ioctl(fd, FBIOPUT_VSCREENINFO, &vi) < 0) {
+        perror("failed to put fb0 info");
+        close(fd);
+        return NULL;
+    }
+#endif
 
     // We print this out for informational purposes only, but
     // throughout we assume that the framebuffer device uses an RGBX
@@ -269,6 +345,31 @@
 #if defined(RECOVERY_BGRA)
     printf("RECOVERY_BGRA\n");
 #endif
+
+#ifdef IMX_EPDC
+    auto_update_mode = AUTO_UPDATE_MODE_REGION_MODE;
+    if (ioctl(fd, MXCFB_SET_AUTO_UPDATE_MODE, &auto_update_mode) < 0) {
+        perror("set auto update mode failed\n");
+        return NULL;
+    }
+
+    wv_modes.mode_init = 0;
+    wv_modes.mode_du = 1;
+    wv_modes.mode_gc4 = 2;
+    wv_modes.mode_gc8 = 2;
+    wv_modes.mode_gc16 = 2;
+    wv_modes.mode_gc32 = 2;
+    if (ioctl(fd, MXCFB_SET_WAVEFORM_MODES, &wv_modes) < 0) {
+        perror("set waveform modes failed\n");
+        return NULL;
+    }
+
+    if (ioctl(fd, MXCFB_SET_UPDATE_SCHEME, &scheme) < 0) {
+        perror("set update scheme failed\n");
+        return NULL;
+    }
+#endif
+
     fb_fd = fd;
     set_displayed_framebuffer(0);
 
diff --git a/minuitwrp/include/linux/mxcfb.h b/minuitwrp/include/linux/mxcfb.h
new file mode 100644
index 0000000..fdb9bd6
--- /dev/null
+++ b/minuitwrp/include/linux/mxcfb.h
@@ -0,0 +1,180 @@
+/*
+ * Copyright (C) 2013-2014 Freescale Semiconductor, Inc. All Rights Reserved
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+/*
+ * @file uapi/linux/mxcfb.h
+ *
+ * @brief Global header file for the MXC frame buffer
+ *
+ * @ingroup Framebuffer
+ */
+#ifndef __ASM_ARCH_MXCFB_H__
+#define __ASM_ARCH_MXCFB_H__
+
+#include <linux/fb.h>
+
+#define FB_SYNC_OE_LOW_ACT	0x80000000
+#define FB_SYNC_CLK_LAT_FALL	0x40000000
+#define FB_SYNC_DATA_INVERT	0x20000000
+#define FB_SYNC_CLK_IDLE_EN	0x10000000
+#define FB_SYNC_SHARP_MODE	0x08000000
+#define FB_SYNC_SWAP_RGB	0x04000000
+#define FB_ACCEL_TRIPLE_FLAG	0x00000000
+#define FB_ACCEL_DOUBLE_FLAG	0x00000001
+
+struct mxcfb_gbl_alpha {
+	int enable;
+	int alpha;
+};
+
+struct mxcfb_loc_alpha {
+	int enable;
+	int alpha_in_pixel;
+	unsigned long alpha_phy_addr0;
+	unsigned long alpha_phy_addr1;
+};
+
+struct mxcfb_color_key {
+	int enable;
+	__u32 color_key;
+};
+
+struct mxcfb_pos {
+	__u16 x;
+	__u16 y;
+};
+
+struct mxcfb_gamma {
+	int enable;
+	int constk[16];
+	int slopek[16];
+};
+
+struct mxcfb_rect {
+	__u32 top;
+	__u32 left;
+	__u32 width;
+	__u32 height;
+};
+
+#define GRAYSCALE_8BIT				0x1
+#define GRAYSCALE_8BIT_INVERTED			0x2
+#define GRAYSCALE_4BIT                          0x3
+#define GRAYSCALE_4BIT_INVERTED                 0x4
+
+#define AUTO_UPDATE_MODE_REGION_MODE		0
+#define AUTO_UPDATE_MODE_AUTOMATIC_MODE		1
+
+#define UPDATE_SCHEME_SNAPSHOT			0
+#define UPDATE_SCHEME_QUEUE			1
+#define UPDATE_SCHEME_QUEUE_AND_MERGE		2
+
+#define UPDATE_MODE_PARTIAL			0x0
+#define UPDATE_MODE_FULL			0x1
+
+#define WAVEFORM_MODE_AUTO			257
+
+#define TEMP_USE_AMBIENT			0x1000
+
+#define EPDC_FLAG_ENABLE_INVERSION		0x01
+#define EPDC_FLAG_FORCE_MONOCHROME		0x02
+#define EPDC_FLAG_USE_CMAP			0x04
+#define EPDC_FLAG_USE_ALT_BUFFER		0x100
+#define EPDC_FLAG_TEST_COLLISION		0x200
+#define EPDC_FLAG_GROUP_UPDATE			0x400
+#define EPDC_FLAG_USE_DITHERING_Y1		0x2000
+#define EPDC_FLAG_USE_DITHERING_Y4		0x4000
+
+#define FB_POWERDOWN_DISABLE			-1
+
+struct mxcfb_alt_buffer_data {
+	__u32 phys_addr;
+	__u32 width;	/* width of entire buffer */
+	__u32 height;	/* height of entire buffer */
+	struct mxcfb_rect alt_update_region;	/* region within buffer to update */
+};
+
+struct mxcfb_update_data {
+	struct mxcfb_rect update_region;
+	__u32 waveform_mode;
+	__u32 update_mode;
+	__u32 update_marker;
+	int temp;
+	unsigned int flags;
+	struct mxcfb_alt_buffer_data alt_buffer_data;
+};
+
+struct mxcfb_update_marker_data {
+	__u32 update_marker;
+	__u32 collision_test;
+};
+
+/*
+ * Structure used to define waveform modes for driver
+ * Needed for driver to perform auto-waveform selection
+ */
+struct mxcfb_waveform_modes {
+	int mode_init;
+	int mode_du;
+	int mode_gc4;
+	int mode_gc8;
+	int mode_gc16;
+	int mode_gc32;
+	int mode_aa;
+	int mode_aad;
+	int mode_gl16;
+	int mode_a2;
+};
+
+/*
+ * Structure used to define a 5*3 matrix of parameters for
+ * setting IPU DP CSC module related to this framebuffer.
+ */
+struct mxcfb_csc_matrix {
+	int param[5][3];
+};
+
+#define MXCFB_WAIT_FOR_VSYNC	_IOW('F', 0x20, u_int32_t)
+#define MXCFB_SET_GBL_ALPHA     _IOW('F', 0x21, struct mxcfb_gbl_alpha)
+#define MXCFB_SET_CLR_KEY       _IOW('F', 0x22, struct mxcfb_color_key)
+#define MXCFB_SET_OVERLAY_POS   _IOWR('F', 0x24, struct mxcfb_pos)
+#define MXCFB_GET_FB_IPU_CHAN 	_IOR('F', 0x25, u_int32_t)
+#define MXCFB_SET_LOC_ALPHA     _IOWR('F', 0x26, struct mxcfb_loc_alpha)
+#define MXCFB_SET_LOC_ALP_BUF    _IOW('F', 0x27, unsigned long)
+#define MXCFB_SET_GAMMA	       _IOW('F', 0x28, struct mxcfb_gamma)
+#define MXCFB_GET_FB_IPU_DI 	_IOR('F', 0x29, u_int32_t)
+#define MXCFB_GET_DIFMT	       _IOR('F', 0x2A, u_int32_t)
+#define MXCFB_GET_FB_BLANK     _IOR('F', 0x2B, u_int32_t)
+#define MXCFB_SET_DIFMT		_IOW('F', 0x2C, u_int32_t)
+#define MXCFB_CSC_UPDATE	_IOW('F', 0x2D, struct mxcfb_csc_matrix)
+
+/* IOCTLs for E-ink panel updates */
+#define MXCFB_SET_WAVEFORM_MODES	_IOW('F', 0x2B, struct mxcfb_waveform_modes)
+#define MXCFB_SET_TEMPERATURE		_IOW('F', 0x2C, int32_t)
+#define MXCFB_SET_AUTO_UPDATE_MODE	_IOW('F', 0x2D, __u32)
+#define MXCFB_SEND_UPDATE		_IOW('F', 0x2E, struct mxcfb_update_data)
+#define MXCFB_WAIT_FOR_UPDATE_COMPLETE	_IOWR('F', 0x2F, struct mxcfb_update_marker_data)
+#define MXCFB_SET_PWRDOWN_DELAY		_IOW('F', 0x30, int32_t)
+#define MXCFB_GET_PWRDOWN_DELAY		_IOR('F', 0x31, int32_t)
+#define MXCFB_SET_UPDATE_SCHEME		_IOW('F', 0x32, __u32)
+#define MXCFB_GET_WORK_BUFFER		_IOWR('F', 0x34, unsigned long)
+#define MXCFB_DISABLE_EPDC_ACCESS	_IO('F', 0x35)
+#define MXCFB_ENABLE_EPDC_ACCESS	_IO('F', 0x36)
+#endif
